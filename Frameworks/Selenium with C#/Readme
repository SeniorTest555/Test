This project is an automation testing framework built using NUnit and SpecFlow. It is designed to ensure the reliability and consistency of our application's behavior through comprehensive test cases, adhering to best practices in test automation.

## Key Features

- **NUnit Integration:** 
  - Integrated NUnit as the testing framework to execute and manage test cases efficiently. NUnit provides a robust and easy-to-use testing environment, ensuring our test cases are reliable and maintainable.

- **SpecFlow for BDD:**
  - Utilized SpecFlow for behavior-driven development (BDD), allowing us to write human-readable tests that map directly to business requirements. This approach bridges the gap between technical and non-technical stakeholders, ensuring everyone understands the test cases.

- **Page Object Model (POM):**
  - Implemented the Page Object Model (POM) design pattern to organize locators and interactions. This ensures that our test code is modular, maintainable, and easy to extend or update.

- **SpecFlow Hooks:**
  - Developed and maintained hooks in SpecFlow to manage test setup, teardown, and data initialization. This streamlines the test execution process, ensuring tests are independent and consistently executed.

- **Comprehensive Reporting:**
  - Created comprehensive test reports using NUnit's reporting features. Additionally, integrated third-party reporting tools for enhanced visibility and actionable insights into test results.

- **Coding Standards and Best Practices:**
  - Adhered to coding standards and best practices throughout the development of this framework, ensuring that the codebase remains clean, consistent, and easy to maintain over time.

## Getting Started

### Prerequisites

Ensure you have the following installed on your system:

- [.NET SDK](https://dotnet.microsoft.com/download)
- [NUnit Console or Test Adapter](https://nunit.org/)
- [SpecFlow Extension for Visual Studio](https://marketplace.visualstudio.com/items?itemName=TechTalkSpecFlow.SpecFlow)
- [NuGet Package Manager](https://www.nuget.org/)

### Installation

1. **Clone the Repository:**
   ```bash
   git clone https://github.com/yourusername/your-repo-name.git
   ```
2. **Navigate to the Project Directory:**
   ```bash
   cd your-repo-name
   ```

### Running the Tests

You can run the tests using the NUnit console or directly through Visual Studio. Below are the instructions for both:

#### 1. Using Visual Studio:
   - Open the solution file (`.sln`) in Visual Studio.
   - Build the solution.
   - Open the `Test Explorer` (from the `Test` menu).
   - Click on `Run All` to execute all the tests.

#### 2. Using NUnit Console:
   - Open a terminal and navigate to the project directory.
   - Run the following command to execute the tests:
     ```bash
     dotnet test
     ```

### Reporting

After running the tests, the test results will be available in the NUnit test report. If you have configured third-party reporting tools, the detailed reports will be available according to your setup.

### Project Structure

- `Features/`: Contains the SpecFlow feature files, which describe the test scenarios in Gherkin syntax.
- `Steps/`: Contains the step definition files where the Gherkin steps are implemented.
- `Pages/`: Implements the Page Object Model, organizing the web element locators and interactions.
- `Hooks/`: Contains the SpecFlow hooks for managing setup, teardown, and other pre/post-test actions.
- `Reports/`: Stores the test reports generated after the test execution.

